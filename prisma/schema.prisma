generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  image              String
  biography          String?
  role               UserRole             @default(GENERAL)
  createdAt          DateTime             @default(now())
  chatMessages       ChatMessage[]
  friends            User[]               @relation("UserFriends")
  symmetricFriends   User[]               @relation("UserFriends")
  sentRequests       FriendRequest[]      @relation("Sender")
  receivedRequests   FriendRequest[]      @relation("Receiver")
  chatRooms          ChatRoom[]
  sentInvitaions     ChatRoomInvitation[] @relation("Sender")
  receivedInvitaions ChatRoomInvitation[] @relation("Receiver")
}

enum UserRole {
  ADMIN
  GENERAL
}

model FriendRequest {
  sender     User          @relation("Sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User          @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String
  createdAt  DateTime      @default(now())
  status     RequestStatus @default(PENDING)

  @@unique([senderId, receiverId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ChatRoom {
  id           String               @id @default(uuid())
  name         String
  createdAt    DateTime             @default(now())
  chatMessages ChatMessage[]
  members      User[]
  invitations  ChatRoomInvitation[]
}

model ChatRoomInvitation {
  chatRoomId String
  chatRoom   ChatRoom         @relation(fields: [chatRoomId], references: [id])
  senderId   String
  sender     User             @relation("Sender", fields: [senderId], references: [id])
  receiverId String
  receiver   User             @relation("Receiver", fields: [receiverId], references: [id])
  status     InvitationStatus @default(PENDING)

  @@unique([chatRoomId, senderId, receiverId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ChatMessage {
  id          String                  @id @default(uuid())
  text        String
  createdAt   DateTime                @default(now())
  userId      String
  user        User                    @relation(fields: [userId], references: [id])
  chatRoomId  String
  chatRoom    ChatRoom                @relation(fields: [chatRoomId], references: [id])
  attachments ChatMessageAttachment[]
}

model ChatMessageAttachment {
  id            String      @id @default(uuid())
  path          String
  chatMessageId String
  chatMessage   ChatMessage @relation(fields: [chatMessageId], references: [id])
}
